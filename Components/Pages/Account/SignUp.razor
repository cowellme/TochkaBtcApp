@page "/sign-up"
@using TochkaBtcApp.Models.ViewModels
@using System.Security.Claims
@using TochkaBtcApp.Models
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject ApplicationContext applicationContext
@inject NavigationManager navigationManager

<div class="modal-overlay d-flex justify-content-center align-items-center" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000;">
    <div class="modal-content bg-dark p-4" style="max-width: 500px; width: 90%; background: #343447; border-radius: 16px">
        <EditForm Model="@Model" OnValidSubmit="Registrated" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="text-center mb-4">
                <h3 class="text-light">Регистрация</h3>
            </div>
            
            <div class="mb-3">
                <InputText @bind-Value="Model.UserName" class="form-control" placeholder="username" />
                <ValidationMessage For="() => Model.UserName" class="text-danger small" />
            </div>

            <div class="mb-4">
                <InputText @bind-Value="Model.Password" class="form-control" type="password" placeholder="password" />
                <ValidationMessage For="() => Model.Password" class="text-danger small" />
            </div>
            <div class="mb-3 w-50 d-flex gap-2 mx-auto">
                <a href="/" class="btn btn-primary w-100 text-center">На главную</a>
                <button class="btn btn-primary save-button" style="floar: left; border-radius: 8px !important;" type="submit">Зарегистрироваться</button>
            </div>
        </EditForm>
    </div>
</div>



<style>
    .save-button {
        background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
        border: none;
        border-radius: 8px;
        padding: 10px 20px;
        font-weight: 600;
        transition: all 0.3s ease;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

        .save-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
        }

        .save-button:active {
            transform: translateY(0);
        }

    .input {
        font-weight: 600;
        background: #33373f;
        border-color: #12242e;
        color: #c8c8c7;
    }

    .binance-block {
        transition: all 0.3s ease;
        overflow: hidden;
    }

    .collapsed {
        max-height: 0;
        opacity: 0;
        margin-bottom: 0 !important;
    }

    .expanded {
        max-height: 500px;
        /* Достаточно для содержимого */
        opacity: 1;
    }
</style>

@code {

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();

    private string? errorMessage;

    private async Task Registrated()
    {
        var user = applicationContext.Users.FirstOrDefault(x =>
            x.Name == Model.UserName);

        if (user is null)
        {
            user = new AppUser
                {
                    Password = Model.Password,
                    Name = Model.UserName
                };

            applicationContext.SaveUser(user);

            var claims = new List<Claim>()
            {
                new(ClaimTypes.Name, Model.UserName),
            };

            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(identity);
            await HttpContext.SignInAsync(principal);
            navigationManager.NavigateTo("/");
        }
        else
        {
            errorMessage = "Пользователь с таким именем уже существует";
        }
    }
}
