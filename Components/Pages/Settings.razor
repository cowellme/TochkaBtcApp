@page "/settings"
@using TochkaBtcApp.Models.Exc
@using Binance.Net.Objects.Models.Futures
@inject ApplicationContext ApplicationContext
@rendermode InteractiveServer

<PageTitle>Настройки</PageTitle>

<AuthorizeView>
    <Authorized>
        @if (authenticatotrTask == null)
        {
            <p>Загрузка...</p>
        }
        else
        {
            if (!TelegramId)
            {
                <div class="container-sm w-100 mt-3 p-0">
                    <a class=" nav-link text-white btn app-font m-0 pb-3 pt-3" href="https://t.me/OrganizeParty_bot" style="background: #0088CC; border-radius: 16px; w font-weight: 600;">
                        Telegram Bot
                    </a>
                </div>
            }
            if (!string.IsNullOrEmpty(_message))
            {
                <div style="position: absolute; width: max-content; height: max-content; background: #94d0b4; padding: 30px; padding-bottom: 10px; padding-top: 10px; border-radius: 8px; left: 50%; transform: translate(-50%, 100px)">
                    <span style="color: #00190d; font-weight: 600;">@_message</span>
                </div>
            }
            
            <div class="container-sm w-100 p-4 mt-3 app-font" 
                 style="background: #343447; border-radius: 15px;">
                <div @onclick="ToggleBitGetVisibility" 
                     style="cursor: pointer;">
                    <p class="h5 m-0">Bitunix @(isBitGetVisible ? "↥" : "↧")</p>
                </div>
                <div class="@(isBitGetVisible ? "expanded" : "collapsed") binance-block">
                    <label class="form-label mt-3">Открытый ключ:</label>
                    <input type="text" @bind="ApiBitUnix" class="form-control input mb-3"/>
                    <label class="form-label">Секретный ключ:</label>
                    <input type="text" @bind="SecretBitUnix" class="form-control input"/>

                </div>
            </div>

            <div class="container-sm w-100 p-4 mt-3" style="background: #343447; border-radius: 15px;">

                <div @onclick="ToggleBingxVisibility" style="cursor: pointer;">
                    <p class="h5 m-0">Bingx @(isBingxVisible ? "↥" : "↧")</p>
                </div>
                <div class="@(isBingxVisible ? "expanded" : "collapsed") binance-block">
                    <label class="form-label mt-3">Открытый ключ:</label>
                    <input type="text" @bind="ApiBingx" class="form-control input mb-3" />
                    <label class="form-label">Секретный ключ:</label>
                    <input type="text" @bind="SecretBingx" class="form-control input" />
                </div>
            </div>

            <div class="container-sm w-100 p-0">
                <div class="d-flex justify-content-end mt-3" style="border-radius: 5px;">
                    <button class="btn btn-primary save-button" @onclick="() => SaveSettings()">
                        Сохранить
                    </button>
                </div>
            </div>
            
            
            @if (_positions != null)
            {
                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-1 g-4 mt-3 mb-3">
                    <div class="col">
                        <div class="card h-100 shadow-sm">
                            <div class="card-header bg-primary text-white">
                                <h5 class="card-title mb-0">Общее</h5>
                            </div>
                            <div class="card-body row-cols-lg-4" style="background-color: #12242e">
                                <div class="d-flex justify-content-between">
                                    <span class="text-muted">PNL:</span>
                                    <span class="@(_allPnl >= 0 ? "text-success" : "text-danger") fw-bold">
                                        @_allPnl.ToString("N2") USDT
                                    </span>
                                </div>
                                <div class="d-flex justify-content-between">
                                    <span class="text-muted">Количество сделок:</span>
                                    <span class="fw-bold">
                                        @_positions.Where(x => x.Symbol == "BTCUSDT").Count()
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4 mt-3 mb-3">
                    @foreach (var position in _positions.Where(x => x.Symbol == "BTCUSDT").ToList())
                    {
                        <div class="col">
                            <div class="card h-100 shadow-sm">
                                <div class="card-header bg-primary text-white">
                                    <h5 class="card-title mb-0">@position.Symbol</h5>
                                </div>
                                <div class="card-body" style="background-color: #12242e">
                                    <div class="d-flex justify-content-between">
                                        <span class="text-muted">PNL:</span>
                                        <span class="@(position.RealizedPnl >= 0 ? "text-success" : "text-danger") fw-bold">
                                            @position.RealizedPnl.ToString("N2") USDT
                                        </span>
                                    </div>
                                    <div class="d-flex justify-content-between mt-2">
                                        <span class="text-muted">Цена открытия:</span>
                                        <span>@position.Price.ToString("N2") USDT</span>
                                    </div>
                                    <div class="d-flex justify-content-between mt-2">
                                        <span class="text-muted">Количество:</span>
                                        <span>@position.Quantity.ToString("N4") BTC</span>
                                    </div>
                                </div>
                                <div class="card-footer bg-transparent">
                                    <small class="text-muted">
                                        Открыто: @position.Timestamp.ToString("g")
                                    </small>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            
            <div class="container-sm w-100 p-0">
                <div class="d-flex gap-2 w-50">
                    <a class=" nav-link text-white btn btn-danger px-3 app-font  gap-2" href="logout" style="border-radius: 8px; w font-weight: 600;">
                        Выход
                    </a>
                </div>
            </div>
            
        }
    </Authorized>
</AuthorizeView>



<style>
    .save-button {
    background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
    border: none;
    border-radius: 8px;
    padding: 10px 20px;
    font-weight: 600;
    transition: all 0.3s ease;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .save-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
    }

    .save-button:active {
    transform: translateY(0);
    }

    .input {
    font-weight: 600;
    background: #33373f;
    border-color: #12242e;
    color: #c8c8c7;
    }

    .binance-block {
    transition: all 0.3s ease;
    overflow: hidden;
    }

    .collapsed {
    max-height: 0;
    opacity: 0;
    margin-bottom: 0 !important;
    }

    .expanded {
    max-height: 500px;
    /* Достаточно для содержимого */
    opacity: 1;
    }
</style>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticatotrTask { get; set; }

    private decimal _allPnl = 0;
    private List<BinanceFuturesUsdtTrade>? _positions;
    private string _message;

    public async Task ViewMessage(string message)
    {
        _message = message;
        StateHasChanged();

        await Task.Delay(2000); // Ждем 2 секунды

        _message = string.Empty;
        StateHasChanged();
    }

    string pas = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var ath = await authenticatotrTask;

        if (ath.User.Identity != null)
        {
            using var ctx = new ApplicationContext();
            var user = ctx.Users.FirstOrDefault(x => x.Name == ath.User.Identity.Name);
            if (user != null)
            {
                ApiBinance = user.ApiBinance;
                SecretBinance = user.SecretBinance;

                ApiBingx = user.ApiBingx;
                SecretBingx = user.SecretBingx;

                ApiBitUnix = user.ApiBitUnix;
                SecretBitUnix = user.SecretBitUnix;

                TelegramId = user.IsTelegram;
                _positions = Binance.GetPositionsHistory(user);
                if (_positions != null)
                {
                    foreach (var position in _positions.Where(x => x.Symbol == "BTCUSDT"))
                    {
                        _allPnl += position.RealizedPnl;
                    }
                }
            }
        }
    }

    private async Task SaveSettings()
    {
        try
        {
            var ath = await authenticatotrTask;

            if (ath.User.Identity != null)
            {
                var user = ApplicationContext.Users.FirstOrDefault(x => x.Name == ath.User.Identity.Name);

                if (user != null)
                {
                    user.ApiBinance = ApiBinance;
                    user.SecretBinance = SecretBinance;
                    user.ApiBingx = ApiBingx;
                    user.SecretBingx = SecretBingx;
                    user.ApiBitUnix = ApiBitUnix;
                    user.SecretBitUnix = SecretBitUnix;
                    user.SecretBitUnix = SecretBitUnix;
                    ApplicationContext.SaveChanges();
                }
            }
            
            await ViewMessage("Сохраненно!");
        }
        catch (Exception e)
        {
            await ViewMessage(e.Message);
        }
    }


    private string? ApiBinance { get; set; }
    private string? SecretBinance { get; set; }

    private string? ApiBingx { get; set; }
    private string? SecretBingx { get; set; }

    private string? ApiBitUnix { get; set; }
    private string? SecretBitUnix { get; set; }
    private bool TelegramId { get; set; }

    private void ToggleBinanceVisibility()
    {
        isBinanceVisible = !isBinanceVisible;
    }
    private void ToggleBitGetVisibility()
    {
        isBitGetVisible = !isBitGetVisible;
    }
    private void ToggleBingxVisibility()
    {
        isBingxVisible = !isBingxVisible;
    }

    public bool isBinanceVisible = false;
    public bool isBingxVisible = false;
    public bool isBitGetVisible = false;
}
